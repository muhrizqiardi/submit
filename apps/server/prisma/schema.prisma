// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  users     User[]
}

model User {
  id        String   @id @default(uuid())
  username  String   @unique
  email     String   @unique
  password  String
  bio       Bio?
  role      Role     @relation(fields: [roleId], references: [id])
  roleId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  replies   Reply[]
  posts     Post[]
  voteOnPosts UserVotesOnPost[]
  voteOnReplies UserVotesOnReply[]
}

model Bio {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  bio       String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Post {
  id              String          @id @default(uuid())
  title           String
  content         String
  link            String
  author          User            @relation(fields: [authorId], references: [id])
  authorId        String
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @default(now())
  childrenReplies RepliesOnPost[]
  votes UserVotesOnPost[]
}

model Reply {
  id              String           @id @default(uuid())
  author          User             @relation(fields: [authorId], references: [id])
  authorId        String
  content         String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now())
  parentPost      RepliesOnPost?
  parentReply     RepliesOnReply?  @relation("repliesOnReply_childReply")
  childrenReplies RepliesOnReply[] @relation("repliesOnReply_parentReply")
  votes UserVotesOnReply[]
}

model RepliesOnPost {
  parentPost   Post   @relation(fields: [parentPostId], references: [id])
  parentPostId String
  childReply   Reply  @relation(fields: [childReplyId], references: [id])
  childReplyId String @unique

  @@id([parentPostId, childReplyId])
}

model RepliesOnReply {
  parentReply   Reply  @relation("repliesOnReply_parentReply", fields: [parentReplyId], references: [id])
  parentReplyId String
  childReply    Reply  @relation("repliesOnReply_childReply", fields: [childReplyId], references: [id])
  childReplyId  String @unique

  @@id([parentReplyId, childReplyId])
}

model UserVotesOnPost {
  vote Int 
  post Post @relation(fields: [postId], references: [id])
  postId String
  user User @relation(fields: [userId], references: [id])
  userId String @unique

  @@id([postId, userId])
}

model UserVotesOnReply {
  vote Int 
  reply Reply @relation(fields: [replyId], references: [id])
  replyId String
  user User @relation(fields: [userId], references: [id])
  userId String @unique

  @@id([replyId, userId])
}